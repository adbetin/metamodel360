/*
 * generated by Xtext 2.12.0
 */
package co.betinrubio.serializer;

import co.betinrubio.services.Dsl360GrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import metamodel360.Hotspot;
import metamodel360.Metamodel360Package;
import metamodel360.Panorama;
import metamodel360.Posicion;
import metamodel360.Proyecto;
import metamodel360.Rotacion;
import metamodel360.Tour;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Dsl360SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Dsl360GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Metamodel360Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Metamodel360Package.HOTSPOT:
				sequence_Hotspot(context, (Hotspot) semanticObject); 
				return; 
			case Metamodel360Package.PANORAMA:
				sequence_Panorama(context, (Panorama) semanticObject); 
				return; 
			case Metamodel360Package.POSICION:
				sequence_Posicion(context, (Posicion) semanticObject); 
				return; 
			case Metamodel360Package.PROYECTO:
				sequence_Proyecto(context, (Proyecto) semanticObject); 
				return; 
			case Metamodel360Package.ROTACION:
				sequence_Rotacion(context, (Rotacion) semanticObject); 
				return; 
			case Metamodel360Package.TOUR:
				sequence_Tour(context, (Tour) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Hotspot returns Hotspot
	 *
	 * Constraint:
	 *     (name=EString destino=[Panorama|EString] posicion=Posicion rotacion=Rotacion)
	 */
	protected void sequence_Hotspot(ISerializationContext context, Hotspot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.HOTSPOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.HOTSPOT__NAME));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.HOTSPOT__DESTINO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.HOTSPOT__DESTINO));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.HOTSPOT__POSICION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.HOTSPOT__POSICION));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.HOTSPOT__ROTACION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.HOTSPOT__ROTACION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHotspotAccess().getNameEStringParserRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHotspotAccess().getDestinoPanoramaEStringParserRuleCall_8_0_1(), semanticObject.eGet(Metamodel360Package.Literals.HOTSPOT__DESTINO, false));
		feeder.accept(grammarAccess.getHotspotAccess().getPosicionPosicionParserRuleCall_12_0(), semanticObject.getPosicion());
		feeder.accept(grammarAccess.getHotspotAccess().getRotacionRotacionParserRuleCall_16_0(), semanticObject.getRotacion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Panorama returns Panorama
	 *
	 * Constraint:
	 *     (name=EString imagen=EString? hotspots+=Hotspot hotspots+=Hotspot*)
	 */
	protected void sequence_Panorama(ISerializationContext context, Panorama semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Posicion returns Posicion
	 *
	 * Constraint:
	 *     (x=EDouble y=EDouble z=EDouble)
	 */
	protected void sequence_Posicion(ISerializationContext context, Posicion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.PUNTO__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.PUNTO__X));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.PUNTO__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.PUNTO__Y));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.PUNTO__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.PUNTO__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPosicionAccess().getXEDoubleParserRuleCall_4_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPosicionAccess().getYEDoubleParserRuleCall_8_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getPosicionAccess().getZEDoubleParserRuleCall_12_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Proyecto returns Proyecto
	 *
	 * Constraint:
	 *     (name=EString toures+=Tour toures+=Tour*)
	 */
	protected void sequence_Proyecto(ISerializationContext context, Proyecto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rotacion returns Rotacion
	 *
	 * Constraint:
	 *     (x=EDouble y=EDouble z=EDouble)
	 */
	protected void sequence_Rotacion(ISerializationContext context, Rotacion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.PUNTO__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.PUNTO__X));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.PUNTO__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.PUNTO__Y));
			if (transientValues.isValueTransient(semanticObject, Metamodel360Package.Literals.PUNTO__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Metamodel360Package.Literals.PUNTO__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotacionAccess().getXEDoubleParserRuleCall_4_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getRotacionAccess().getYEDoubleParserRuleCall_8_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getRotacionAccess().getZEDoubleParserRuleCall_12_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tour returns Tour
	 *
	 * Constraint:
	 *     (name=EString panoramas+=Panorama panoramas+=Panorama*)
	 */
	protected void sequence_Tour(ISerializationContext context, Tour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
