/**
 * generated by Xtext 2.12.0
 */
package co.betinrubio.scoping;

import com.google.common.base.Objects;
import metamodel360.Hotspot;
import metamodel360.Tour;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class Dsl360ScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * Metodo que sobreescribe el metodo getScope de AbstractDeclarativeScopeProvider
   * con el fin de aplicar nuestro propio scoping. En el cuerpo de este metodo debemos usar
   * los parametros: context (el objeto sobre el que se aplicara el Scope) y reference (el atributo del objeto en cuestion).
   * Por lo tanto se debe hacer referencia a los panoramas del tour en el cual se encuentra incluido el hotspot
   */
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof Hotspot) && Objects.equal(reference.getName(), "destino"))) {
      EObject _eContainer = context.eContainer().eContainer();
      return Scopes.scopeFor(((Tour) _eContainer).getPanoramas());
    }
    return super.getScope(context, reference);
  }
}
